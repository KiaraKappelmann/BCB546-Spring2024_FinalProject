---
title: "Final_Project_Figure1"
author: "Russell Greene"
date: "2024-04-29"
output: html_document
---

# Final Project - Figure 1

Figure 1 is a scatter plot of the amount of Mg25 and Cd111 for 24 of the genotypes between the 2010 and 2011 sampling years.

## Load Packages

```{r load packages}
library(dplyr)
library(ggplot2)
library(gridExtra)
```

## Data Manipulation

### Selecting Data

This code will select only the elemental data, Genotype, and Year from the `full.data` data frame.

```{r select data}
selected_data <- select(full.data, 3:22, 26, 27) # Select only the data necessary to generate the scatter plots
head(selected_data)
```

### Calculate Mean

This code will calculate the mean for each of the genotypic samples and separate them by Year, as well. The output will be the `mean_values` data frame with only one row for each genotype for each year.

```{r mean data}
mean_values <- selected_data %>% # Create new data frame with mean values from all the data in the selected data frame 
  group_by(Genotype, Year) %>% # Group the selected data by genotype and year
  summarise(across(where(is.numeric), mean, na.rm = TRUE)) # Calculate the mean values for each element based on the genotype and year
```

### Remove Certain Genotypes

This code will remove Genotypes from the `mean_values` data frame that the authors didn't include in their plots. It first creates a vector with the specific genotypic names and then filters the `mean_values` data frame for any genotype name that IS NOT in the `genotypes_to_remove` vector. The output will be populated into a `final_values` data frame.

```{r remove genotypes}
genotypes_to_remove <- c("IL14H", "HP301", "P39") # Create a vector of genotypes to remove
final_values <- mean_values %>% # Assign filtered data to a new data frame
  filter(!Genotype %in% genotypes_to_remove) # Filter mean_values data frame by every genotype that is not in the genotypes_to_remove vector

```

### Separating Each Element into New Data Frames

This code will separate each element from the `final values` data frame into their own data frame with each genotype and year. It does this by first generating an `elemental_columns` vector with all the element names extracted from the `final_values` data frame. It will then loop through the `final_values` data frame extracting values for each genotype and year for every element in the `elemental columns` vector. A new data frame will be created for each element with the extracted data. All of these data frames are then stored in a list for ease of access.

```{r separating elements}
elemental_columns <- colnames(final_values)[3:length(final_values)] # Create a vector of elemental isotope names

element_year_dfs <- list() # Create an empty list to store all the elemental data frames

for (element in elemental_columns) { # Loop through the elements in the elemental_columns vector
  element_2010 <- final_values[final_values$Year == 2010, c("Genotype", element)] # 
  element_2011 <- final_values[final_values$Year == 2011, c("Genotype", element)]
  merged_df <- merge(element_2010, element_2011, by = "Genotype", suffixes = c("_2010", "_2011"))
  element_year_dfs[[element]] <- merged_df
}
```

## Plotting

### Mg25 Scatter Plot

```{r Mg25 plot}
element_df <- element_year_dfs[["Mg25"]] 
Mg25_scatter_plot <- ggplot(element_df, aes(x = Mg25_2010, y = Mg25_2011)) +
  geom_point(size = 3) +
  labs(x = "2010", y = "2011") +
  ggtitle("Mg25") +
  theme(plot.title = element_text(hjust = 0.5), panel.background = element_rect(fill = "white"), panel.border = element_rect(color = "black", fill = NA, linewidth = 1), axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14))
print(Mg25_scatter_plot)
```

### Cd111 Scatter Plot

```{r Cd111 plot}
element_df <- element_year_dfs[["Cd111"]]
Cd111_plot <- ggplot(element_df, aes(x = Cd111_2010, y = Cd111_2011)) +
  geom_point(size = 3) +
  labs(x = "2010", y = "2011") +
  ggtitle("Cd111") +
  theme(plot.title = element_text(hjust = 0.5), panel.background = element_rect(fill = "white"), panel.border = element_rect(color = "black", fill = NA, linewidth = 1), axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14))
print(Cd111_plot)
```

### Combined Plot

```{r combined plot}
Mg25_Cd111_combined_plot <- grid.arrange(Mg25_plot, Cd111_plot, ncol = 2)
print(Mg25_Cd111_combined_plot)
```

### Save Plot

```{r save plot}
ggsave("Figure1.png", plot = Mg25_Cd111_combined_plot, width = 8, height = 6, units = "in", dpi = 300)
```

## Extra Plotting
