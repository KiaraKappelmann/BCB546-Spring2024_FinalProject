demo()
q()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
5 + 5
6 + 11
5+5
install.packages("githubinstall")
5 + 5
0.1 + 0.2== 0.3
knitr::opts_chunk$set(echo = TRUE)
x <- 1/40
x
x <- 100
x <- x + 1
x
library(gert)
detach("package:gert", unload = TRUE)
a <- datafile
a <- "datafile"
help("reserved")
c(2, 4, 6)
b <-  c(2, 4, 6)
rep(1:2, times=3)
rep(1:2, each=3)
ls()
.a <- "Am I hidden?"
ls
ls()
ls(all.names = TRUE)
rm(list = ls())
installed.packages()
2widths <- 2
47.5 * 2.3
rm(list = ls())
installed.packages()
install.packages("tidyverse")
installed.packages()
installed.packages("tidyverse")
rm
for (file in .txt) {do
}
`is.outlier` <- function (x,mcut=6.2) {
y <- na.omit(x)
lims <- median(y) + c(-1, 1) * mcut * mad(y, constant = 1)
for(j in 1:length(x)){
if(is.na(x[j]) | x[j] < lims[1] | x[j] > lims[2]){
x[j] <- NA
}
}
return(x)
}
setwd("./BCB546_Final_Project/Data")
setwd("./BCB546_Final_Project/Data")
setwd("~./BCB546_Final_Project/Data")
setwd("~/BCB546_Final_Project/Data")
setwd("~/BCB546_Final_Project/Data")
`is.outlier` <- function (x,mcut=6.2) {
y <- na.omit(x)
lims <- median(y) + c(-1, 1) * mcut * mad(y, constant = 1)
for(j in 1:length(x)){
if(is.na(x[j]) | x[j] < lims[1] | x[j] > lims[2]){
x[j] <- NA
}
}
return(x)
}
`outlierRemoveDataset` <- function (x,mcut=6.2,by=NA,cols){
for(i in cols){
if(is.na(by)){
x[,i] <- is.outlier(x[,i],mcut)
}else{
for(j in unique(x[,by])){
if(is.na(j)){
x[is.na(x[,by]), i] <- is.outlier(x[is.na(x[,by]), i],mcut)
}else{
x[x[,by] == j & !(is.na(x[,by])), i] <- is.outlier(x[x[,by] == j & !(is.na(x[,by])), i],mcut)
}
}
}
}
return(x)
}
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
setwd("./")
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
setwd("C:/Users/russellgreene/BCB546_Final_Project/Data") #change this
setwd("C:/Users/russellgreene/BCB546_Final_Project/Data") #change this
setwd("./") #change this
source('final_functions.R')
setwd("./") #change this
source('final_functions.R')
setwd("./Data") #change this
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
setwd("./") #change this
source('final_functions.R')
setwd("./BCB546_Final_Project/Data") #change this
setwd("./BCB546_Final_Project/Data") #change this
setwd("./BCB546_Final_Project/Data") #change this
setwd("./BCB546_Final_Project/Data/") #change this
setwd("./")
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
setwd("./")
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
samp.data <- read.table(file = "110429_sampledata.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
getwd()
setwd("/Users/russellgreene/BCB546_Final_Project/Data")
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
getwd()
setwd("/Users/russellgreene/BCB546_Final_Project/Data")
all.data <- read.table (file = "./BCB546_Final_Project/Data/130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
getwd()
setwd("/Users/russellgreene/Desktop")
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
all.data <- read.table (file = "/Users/russellgreene/Desktop/130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
samp.data <- read.table(file = "110429_sampledata.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
all.data <- read.table (file = "/Users/russellgreene/Desktop/130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
samp.data <- read.table(file = "/Users/russellgreene/Desktop/110429_sampledata.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
samp.data <- aggregate(samp.data$Row, by = list(Plot = samp.data$Plot,Range = samp.data$Range, Block = samp.data$Rep., Genotype = samp.data$Variety),mean)
colnames(samp.data)[5] <- 'Row'
rerun.data <- merge(all.data,samp.data,by.x = 'sample',by.y = 'Plot')
el.names <- colnames(rerun.data)[12:32]
#rearrange the columns
rerun.data <- rerun.data[,c(1,12:32,34,33,36,35)]
#this function is in the final_functions.R file
or.2010 <- outlierRemoveDataset(rerun.data,15,"sample",el.names)
getwd()
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
setwd("/Users/russellgreene/BCB546_Final_Project/Data/") #change this
all.data <- read.table (file = "130319_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
samp.data <- read.table(file = "110429_sampledata.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
samp.data <- aggregate(samp.data$Row, by = list(Plot = samp.data$Plot,Range = samp.data$Range, Block = samp.data$Rep., Genotype = samp.data$Variety),mean)
colnames(samp.data)[5] <- 'Row'
rerun.data <- merge(all.data,samp.data,by.x = 'sample',by.y = 'Plot')
el.names <- colnames(rerun.data)[12:32]
#rearrange the columns
rerun.data <- rerun.data[,c(1,12:32,34,33,36,35)]
#this function is in the final_functions.R file
or.2010 <- outlierRemoveDataset(rerun.data,15,"sample",el.names)
#read in 2011 data
data.2011 <- read.table(file = "111101_Data.final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
#sample list
samplelist.2011 <- read.table(file = "NAM Grain Sample List 2011.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
merge.2011 <- merge(data.2011, samplelist.2011, by.x = 'sample', by.y = 'Plot')
red.merge.2011 <- merge.2011[,c(1,12:33,35,34,36)] #keep unoutlier removed
#this function is in the final_functions.R file
or.2011 <- outlierRemoveDataset(merge.2011,15,"sample",el.names)
red.or.2011 <- or.2011[,c(1,12:36)]
red.or.2011$Year <- 2011
or.2010$Year <- 2010
red.merge.2011$Year <- 2011
rerun.data$Year <- 2010
noor.full.data <- rbind(rerun.data,red.merge.2011)  #this is the dataset with no outliers removed
#combine the years
full.data <- rbind(red.or.2011,or.2010)
#take average of all the seeds for a given plot
plot.ag <- aggregate(full.data[,el.names], by = list(Plot = full.data$sample,Genotype = full.data$Genotype, Row = full.data$Row, Range = full.data$Range, Block = full.data$Block, Year = full.data$Year),mean, na.rm = T)
library(dplyr)
library(ggplot2)
library(gridExtra)
selected_data <- select(full.data, 3:22, 26, 27) # Select only the data necessary to generate the scatter plots
head(selected_data)
mean_values <- selected_data %>% # Create new data frame with mean values from all the data in the selected data frame
group_by(Genotype, Year) %>% # Group the selected data by genotype and year
summarise(across(where(is.numeric), mean, na.rm = TRUE)) # Calculate the mean values for each element based on the genotype and year
View(mean_values)
genotypes_to_remove <- c("IL14H", "HP301", "P39") # Create a vector of genotypes to remove
final_values <- mean_values %>% # Assign filtered data to a new data frame
filter(!Genotype %in% genotypes_to_remove) # Filter mean_values data frame by every genotype that is not in the genotypes_to_remove vector
elemental_columns <- colnames(final_values)[3:length(final_values)] # Create a vector of elemental isotope names
element_year_dfs <- list() # Create an empty list to store all the elemental data frames
for (element in elemental_columns) { # Loop through the elements in the elemental_columns vector
element_2010 <- final_values[final_values$Year == 2010, c("Genotype", element)] #
element_2011 <- final_values[final_values$Year == 2011, c("Genotype", element)]
merged_df <- merge(element_2010, element_2011, by = "Genotype", suffixes = c("_2010", "_2011"))
element_year_dfs[[element]] <- merged_df
}
element_df <- element_year_dfs[["Mg25"]] # Extract the Mg25 data frame from the list of elements data frames
Mg25_scatter_plot <- ggplot(element_df, aes(x = Mg25_2010, y = Mg25_2011)) + # Create a scatter plot with the extracted Mg25 data with the 2010 data on the x-axis and 2011 data on the y-axis
geom_point(size = 3) + # Set the size of the data points
labs(x = "2010", y = "2011") + # Label the axis
ggtitle("Mg25") + # Set a title for the plot
theme(plot.title = element_text(hjust = 0.5), panel.background = element_rect(fill = "white"), panel.border = element_rect(color = "black", fill = NA, linewidth = 1), axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14)) # Customize the plot by centering the title, setting the background as white, creating a black border, and adjusting the axis label size and color
print(Mg25_scatter_plot)
element_df <- element_year_dfs[["Cd111"]] # Extract the Cd111 data frame from the list of elements data frames
Cd111_plot <- ggplot(element_df, aes(x = Cd111_2010, y = Cd111_2011)) + # Create a scatter plot with the extracted Cd111 data with the 2010 data on the x-axis and 2011 data on the y-axis
geom_point(size = 3) + # Set the size of the data points
labs(x = "2010", y = "2011") + # Label the axis
ggtitle("Cd111") + # Set a title for the plot
theme(plot.title = element_text(hjust = 0.5), panel.background = element_rect(fill = "white"), panel.border = element_rect(color = "black", fill = NA, linewidth = 1), axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14)) # Customize the plot by centering the title, setting the background as white, creating a black border, and adjusting the axis label size and color
print(Cd111_plot)
Mg25_Cd111_combined_plot <- grid.arrange(Mg25_plot, Cd111_plot, ncol = 2) # Combine the Mg25 and Cd111 plots into a single plot with two columns
element_df <- element_year_dfs[["Mg25"]] # Extract the Mg25 data frame from the list of elements data frames
Mg25_plot <- ggplot(element_df, aes(x = Mg25_2010, y = Mg25_2011)) + # Create a scatter plot with the extracted Mg25 data with the 2010 data on the x-axis and 2011 data on the y-axis
geom_point(size = 3) + # Set the size of the data points
labs(x = "2010", y = "2011") + # Label the axis
ggtitle("Mg25") + # Set a title for the plot
theme(plot.title = element_text(hjust = 0.5), panel.background = element_rect(fill = "white"), panel.border = element_rect(color = "black", fill = NA, linewidth = 1), axis.text = element_text(color = "black", size = 12), axis.title = element_text(color = "black", size = 14)) # Customize the plot by centering the title, setting the background as white, creating a black border, and adjusting the axis label size and color
print(Mg25_scatter_plot)
Mg25_Cd111_combined_plot <- grid.arrange(Mg25_plot, Cd111_plot, ncol = 2) # Combine the Mg25 and Cd111 plots into a single plot with two columns
print(Mg25_Cd111_combined_plot)
scatter_plots <- list()
# Loop through each element in the data frame
for (element_name in names(element_year_dfs)) {
# Get the data frame for the current element
element_df <- element_year_dfs[[element_name]]
# Extract column names for 2010 and 2011
col_2010 <- paste0(element_name, "_2010")
col_2011 <- paste0(element_name, "_2011")
# Create a scatter plot for the current element
plot <- ggplot(element_df, aes(x = !!sym(col_2010), y = !!sym(col_2011))) +
geom_point(size = 1) +
labs(x = "2010", y = "2011") +
ggtitle(element_name) +
theme(plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(color = "black", fill = NA, linewidth = 1),
axis.text = element_text(color = "black", size = 12),
axis.title = element_text(color = "black", size = 14))
# Store the plot in the list
scatter_plots[[element_name]] <- plot
}
# Convert the list of plots to a list of grobs (graphical objects)
plots_grobs <- lapply(scatter_plots, ggplotGrob)
# Arrange all plots in a matrix using grid.arrange
all_elements_plot <- grid.arrange(grobs = plots_grobs, ncol = 4)
ggsave("all_elements_plot.png", plot = all_elements_plot, width = 12, height = 10, units = "in", dpi = 300)
